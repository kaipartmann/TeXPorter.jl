precompile(Tuple{Type{NamedTuple{(:stderr, :stdout), T} where T<:Tuple}, Tuple{Base.TTY, Base.TTY}})
precompile(Tuple{Base.var"#pipeline##kw", NamedTuple{(:stderr, :stdout), Tuple{Base.TTY, Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Base.:(!=)), UInt64, UInt64})
precompile(Tuple{typeof(TeXManager.main), Array{String, 1}})
precompile(Tuple{Type{NamedTuple{(:description,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:description,), Tuple{String}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:description,), Tuple{String}}, Symbol})
precompile(Tuple{typeof(Base.source_path)})
precompile(Tuple{typeof(Base.getindex), NamedTuple{(:description,), Tuple{String}}, Symbol})
precompile(Tuple{Type{Base.Set{Char}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Char}}, Base.Set{Char}})
precompile(Tuple{typeof(Base.copy), Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseGroup, 1}}, Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{typeof(Base.getindex), Type{ArgParse.ArgParseField}})
precompile(Tuple{typeof(Base.convert), Type{Array{ArgParse.ArgParseField, 1}}, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgParseTable}, ArgParse.ArgParseTable})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, DataType}, Type, Symbol})
precompile(Tuple{Type{NamedTuple{(:default, :help, :arg_type), T} where T<:Tuple}, Tuple{String, String, DataType}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{String, String, DataType}}}})
precompile(Tuple{Type{Pair{Symbol, Any}}, Symbol, Type{String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#24#26", Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Bool}}, Base.Generator{Base.Dict{Symbol, Any}, ArgParse.var"#24#26"}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Symbol, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Union{Int64, Symbol}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseSettings, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Bool}, Int64})
precompile(Tuple{typeof(Base.first), Array{String, 1}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractString, 1}}, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Type}, Type})
precompile(Tuple{typeof(Base.convert), Type{Symbol}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{ArgParse.ArgConsumerType}, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.convert), Type{Union{AbstractString, Array{var"#s4", 1} where var"#s4"<:AbstractString}}, String})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#19"{ArgParse.ArgParseSettings, ArgParse.var"#r#18"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{String, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.isempty), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseField, Symbol})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseGroup, Symbol})
precompile(Tuple{typeof(Base.append!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy), String})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Int64, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseTable, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{AbstractString, Any}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{AbstractString, Base.Dict{AbstractString, Any}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base.push!), Array{ArgParse.ArgParseField, 1}, ArgParse.ArgParseField})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-dd_HH-MM"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}}, Dates.DateLocale})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("yyyy-mm-dd_HH-MM"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}}}})
precompile(Tuple{typeof(Base.iterate), Array{ArgParse.ArgParseField, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}})
precompile(Tuple{typeof(Base.iterate), Array{AbstractString, 1}, Int64})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{Base.var"##all#751", Function, typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#68#70", Array{String, 1}, Base.Colon})
precompile(Tuple{typeof(Base.isempty), Base.Set{Char}})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseSettings, Symbol, Bool})
precompile(Tuple{Type{NamedTuple{(:action, :help, :group), T} where T<:Tuple}, Tuple{Symbol, String, String}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}})
precompile(Tuple{typeof(Base.keys), Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:action, :help, :group), Tuple{Symbol, String, String}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#62#64", Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#63#65", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#62#64"}})
precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{T, 1} where T}, Array{String, 1}})
precompile(Tuple{Type{Base.Set{AbstractString}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{AbstractString}}, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{ArgParse.ArgParseGroup, AbstractString}}, Base.Dict{ArgParse.ArgParseGroup, AbstractString}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Any}}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Channel{T} where T}, Function})
precompile(Tuple{Base.var"##_#559", Nothing, Bool, Type{Base.Channel{Any}}, ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Int64})
precompile(Tuple{Base.var"#560#561"{ArgParse.var"#69#71"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.iterate), Base.Channel{Any}})
precompile(Tuple{Base.var"#564#565"{Base.Channel{Any}, Task}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ArgParse.var"#36#40", Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}})
precompile(Tuple{Type{Base.Dict{ArgParse.ArgParseGroup, Bool}}, Base.Generator{Base.Iterators.Filter{ArgParse.var"#37#41", Array{ArgParse.ArgParseGroup, 1}}, ArgParse.var"#36#40"}})
precompile(Tuple{typeof(Base.in), String, Base.Set{AbstractString}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{ArgParse.ArgParseGroup, Bool}})
precompile(Tuple{typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{Base.var"##any#749", Function, typeof(Base.any), Function, Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(Base._any), typeof(ArgParse.is_cmd), Array{ArgParse.ArgParseField, 1}, Base.Colon})
precompile(Tuple{typeof(Base.pop!), Array{ArgParse.ArgParseField, 1}})
precompile(Tuple{typeof(TeXManager.find_preamble), String})
precompile(Tuple{typeof(Base.setindex!), Array{TeXManager.Token, 1}, Array{TeXManager.Include, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{TeXManager.Token, 1}, Array{TeXManager.Input, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{TeXManager.Token, 1}, Array{TeXManager.IncludeGraphics, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{TeXManager.Token, 1}, Array{TeXManager.BibResource, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.first), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Array{TeXManager.FileLink, 1}})
precompile(Tuple{typeof(Base.getproperty), TeXManager.FileLink, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{TeXManager.FileLink, 1}, Int64})
precompile(Tuple{typeof(Base.println), Base.TTY})
precompile(Tuple{typeof(TeXManager.ask_for_other_files_to_include), String, Array{String, 1}})
precompile(Tuple{REPL.TerminalMenus.var"#printmenu##kw", NamedTuple{(:init,), Tuple{Bool}}, typeof(REPL.TerminalMenus.printmenu), Base.TTY, REPL.TerminalMenus.MultiSelectMenu{REPL.TerminalMenus.MultiSelectConfig}, Int64})
precompile(Tuple{typeof(REPL.TerminalMenus.readkey), Base.TTY})
precompile(Tuple{Type{NamedTuple{(:oldstate,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{REPL.TerminalMenus.var"#printmenu##kw", NamedTuple{(:oldstate,), Tuple{Int64}}, typeof(REPL.TerminalMenus.printmenu), Base.TTY, REPL.TerminalMenus.MultiSelectMenu{REPL.TerminalMenus.MultiSelectConfig}, Int64})
precompile(Tuple{typeof(Base.println), String, String, Vararg{String}})
precompile(Tuple{typeof(Base.length), Array{TeXManager.FileLink, 1}})
precompile(Tuple{typeof(Base.getindex), Array{TeXManager.FileLink, 1}, Int64})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), TeXManager.var"#1#2", String, Vararg{String}})
precompile(Tuple{typeof(Base.write), Base.IOStream, String})
